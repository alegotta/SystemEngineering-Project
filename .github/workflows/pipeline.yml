name: Test, Build and Deploy
on: push

jobs:
  #tests:
    #env:
      #PRODUCTION: false
    #runs-on: ubuntu-latest
    #services:
      #postgres:
        #image: postgres
        #env:
          #POSTGRES_USER: mealie
          #POSTGRES_PASSWORD: mealie
          #POSTGRES_DB: mealie
        #options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5
        #ports:
          #- 5432:5432
    #steps:
      #- name: Check out repository
        #uses: actions/checkout@v2
      #- name: Set up python
        #uses: actions/setup-python@v2
        #with:
          #python-version: 3.9

      #- name: Install Poetry
        #uses: snok/install-poetry@v1
        #with:
          #virtualenvs-create: true
          #virtualenvs-in-project: true

      #- name: Load cached venv
        #id: cached-poetry-dependencies
        #uses: actions/cache@v2
        #with:
          #path: .venv
          #key: venv-${{ runner.os }}-${{ hashFiles('**/poetry.lock') }}

      #- name: Install dependencies
        #run: |
          #sudo apt-get install libsasl2-dev libldap2-dev libssl-dev
          #poetry install
          #poetry add "psycopg2-binary==2.8.6"
        #if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'

      #- name: Run Test Suite
        #run: |
          #make test-all

      #- name: Run Test Suite
        #env:
          #DB_ENGINE: postgres
          #POSTGRES_SERVER: localhost
        #run: |
          #make test-all

  build-container:
    #needs: [tests]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v1

      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v3
        with:
          images: alegotta/mealie
          tags: |
              type=semver,pattern={{version}}
              type=ref,event=branch
              type=raw,value=latest

      - name: Cache Docker layers
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-multi-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-multi-buildx

      - name: Build Docker image
        uses: docker/build-push-action@v2
        with:
          context: .
          file: cd/image/Dockerfile
          push: true
          builder: ${{ steps.buildx.outputs.name }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=local,src=/tmp/.buildx-cache
          # Note the mode=max here
          # More: https://github.com/moby/buildkit#--export-cache-options
          # And: https://github.com/docker/buildx#--cache-tonametypetypekeyvalue
          cache-to: type=local,mode=max,dest=/tmp/.buildx-cache-new

      - name: Move cache
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache

  deploy-azure:
    needs: [build-container]
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Setup Terraform CLI
        uses: hashicorp/setup-terraform@v1
        with:
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

      - name: Inizialize Terraform
        run: terraform -chdir=cd/deploy init

      - name: Validate the plan
        run: terraform -chdir=cd/deploy plan -no-color

      - name: Apply the deloyment
        run: terraform -chdir=cd/deploy apply -auto-approve
